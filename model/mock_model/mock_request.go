// Code generated by MockGen. DO NOT EDIT.
// Source: request.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	model "github.com/traPtitech/Jomon/model"
)

// MockRequestRepository is a mock of RequestRepository interface.
type MockRequestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRequestRepositoryMockRecorder
}

// MockRequestRepositoryMockRecorder is the mock recorder for MockRequestRepository.
type MockRequestRepositoryMockRecorder struct {
	mock *MockRequestRepository
}

// NewMockRequestRepository creates a new mock instance.
func NewMockRequestRepository(ctrl *gomock.Controller) *MockRequestRepository {
	mock := &MockRequestRepository{ctrl: ctrl}
	mock.recorder = &MockRequestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestRepository) EXPECT() *MockRequestRepositoryMockRecorder {
	return m.recorder
}

// CreateRequest mocks base method.
func (m *MockRequestRepository) CreateRequest(ctx context.Context, amount int, title string, tags []*model.Tag, targets []*model.Target, group *model.Group, userID uuid.UUID) (*model.RequestDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequest", ctx, amount, title, tags, targets, group, userID)
	ret0, _ := ret[0].(*model.RequestDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequest indicates an expected call of CreateRequest.
func (mr *MockRequestRepositoryMockRecorder) CreateRequest(ctx, amount, title, tags, targets, group, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequest", reflect.TypeOf((*MockRequestRepository)(nil).CreateRequest), ctx, amount, title, tags, targets, group, userID)
}

// GetRequest mocks base method.
func (m *MockRequestRepository) GetRequest(ctx context.Context, requestID uuid.UUID) (*model.RequestDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest", ctx, requestID)
	ret0, _ := ret[0].(*model.RequestDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockRequestRepositoryMockRecorder) GetRequest(ctx, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockRequestRepository)(nil).GetRequest), ctx, requestID)
}

// GetRequests mocks base method.
func (m *MockRequestRepository) GetRequests(ctx context.Context, query model.RequestQuery) ([]*model.RequestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequests", ctx, query)
	ret0, _ := ret[0].([]*model.RequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequests indicates an expected call of GetRequests.
func (mr *MockRequestRepositoryMockRecorder) GetRequests(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequests", reflect.TypeOf((*MockRequestRepository)(nil).GetRequests), ctx, query)
}

// UpdateRequest mocks base method.
func (m *MockRequestRepository) UpdateRequest(ctx context.Context, requestID uuid.UUID, amount int, title string, tags []*model.Tag, targets []*model.Target, group *model.Group) (*model.RequestDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRequest", ctx, requestID, amount, title, tags, targets, group)
	ret0, _ := ret[0].(*model.RequestDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRequest indicates an expected call of UpdateRequest.
func (mr *MockRequestRepositoryMockRecorder) UpdateRequest(ctx, requestID, amount, title, tags, targets, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequest", reflect.TypeOf((*MockRequestRepository)(nil).UpdateRequest), ctx, requestID, amount, title, tags, targets, group)
}
