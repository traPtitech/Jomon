openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: '/api'
info:
  version: "1.0.0"
  title: Jomon API
  description: >-
    JomonのAPIです。
paths:
  '/applications':
    get:
      description: 申請書一覧を取得する。
      tags:
        - Applications
      parameters:
        - name: sort
          description:
            並び順 (作成日時が新しい "created_at", 作成日時が古い "-created_at", タイトルの昇順 "title",
            タイトルの降順 "-title")
          required: false
          in: query
          schema:
            type: string
        - name: current_state
          description: 現在の申請書の状態（"submitted","rejected","fix_required","accepted","fully_repaid")
          required: false
          in: query
          schema:
            type: string
        - name: financial_year
          description: 何年度の申請か
          required: false
          in: query
          schema:
            type: integer
        - name: applicant
          description: 誰が申請したか
          required: false
          in: query
          schema:
            $ref: "#/components/schemas/TrapID"
        - name: type
          description: どのタイプか（"club","contest","event","public")
          in: query
          required: false
          schema:
            type: string
        - name: submitted_since
          description: いつからの申請か
          required: false
          in: query
          schema:
            type: string
            format: date
        - name: submitted_until
          description: いつまでの申請か
          required: false
          in: query
          schema:
            type: string
            format: date
      responses:
        "200":
          description: 取得できた。返す。該当するものがなくても空配列を返す。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CompactApplication"
        "400":
            description: リクエストがおかしい。
    post:
      description: 申請書を新規作成する。
      tags:
        - Applications
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PostApplication"
      responses:
        "201":
          description: 作成した。結果を返す。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedApplication"

        "400":
          description: リクエストに形式上または内容の不備がある。例えばtitleが空欄である、amountが負である,指定されたrepaid_to_idに該当するClientが存在しないなど。内容に不備がある場合には、不備があるkeyを配列にして返す。
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "ammout"
  "/applications/{applicationId}":
    parameters:
    - name: applicationId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    get:
      description: 指定した申請書の詳細を取得する。(コメントは作成日時を返す)(画像についてはresponseの画像idから再度apiをたたく。)
      tags:
        - Applications
      responses:
        "200":
          description: あったら返す。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedApplication"
        "404":
          description: 指定されたApplicationIdはない。
    patch:
      description: 指定したApplicationを修正する。(新しいレコードを作る）。修正できるのは申請書の作成者かadminで、かつstateが"submitted"(申請済み)もしくは"fix_required"(要修正))のとき。画像以外はここのbodyの内容を新たな情報と上書きします（追加、削除、変更をおこなう）。画像についてはここでは追加のみ行い、削除はしません（`delete applicaitions/{applicationId}/images/{imageId}`でおこなう）。
      tags:
        - Applications
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PostApplication"
      responses:
        "200":
          description: 修正できた。返す。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedApplication"
        "400":
          description: リクエストに形式上または内容の不備がある。例えばtitleが空欄である、amountが負である,指定されたrepaid_to_idに該当するClientが存在しないなど。内容に不備がある場合には、不備があるkeyを配列にして返す。
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "ammout"
        "403":
          description: 編集権限がない人による操作または編集できないstate
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_user_accepted:
                    type: boolean
                    example: false
                  current_state:
                    $ref: "#/components/schemas/StateEnum"
        "404":
          description: 指定された申請書はない。
  "/applications/{applicationId}/comments":
    post:
      description: 指定した申請書にコメントを新規作成する。
      tags:
        - Comments
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  example: "ここを修正してください。"
      responses:
        "201":
          description: OK
          content:
            application/json:
             schema:
              $ref: "#/components/schemas/Comment"
        "400":
          description: リクエストに形式上または内容の不備がある。例えばコメント欄が空欄。
        "404":
          description: 指定されたコメントはない。
  "/applications/{applicationId}/comments/{commentId}":
    parameters:
    - name: applicationId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    - name: commentId
      in: path
      required: true
      schema:
        type: integer
    put:
      description: コメントを変更する。
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  example: "ここを修正してください。"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: リクエストに形式上または内容の不備がある。例えばコメント欄が空欄。
        "403":
          description: 編集権限がない人(コメント作成者以外)による操作。
        "404":
          description: 指定された申請書はない。
    delete:
      description: 指定したコメントを削除する。
      tags:
        - Comments
      responses:
        "204":
          description: 正常に取り消すことができました。。
        "403":
          description: 編集権限がない人(コメント作成者以外)による操作。
        "404":
          description: 指定されたコメントはない。
  "/applications/{applicationId}/states":
    put:
      description: 指定した申請書のstateを変更のみ（新規はpost /applications で)する。reasonについてはstateを「submittedからfix_required」「submittedからrejected」「acceptedからsubmitted」にするとき必須。stateの行き来の定義は作成者は「fix_requiredからsubmitted（このときapplication更新も行なっているはず）」をでき、adminは「submittedからrejected」「submittedからrequired」「fix_requiredからsubmitted」「submittedからaccepted」「acceptedからsubmitted（ただしすでに支払われている人がいた場合、この操作は不可)」の操作のみ可。ただし、「acceptedからfully_repaid」の操作はここでは行えない。
      tags:
        - States
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                to_state:
                  type: string
                  example: "accepted"
                reason:
                  type: string
                  example: "良いですね。"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                  updated_at:
                    type: string
                    format: date-time
                  current_state:
                    type: string
                    example: "accepted"
                  past_state:
                    type: string
                    example: "rejected"
        "400":
          description: リクエストに形式上または内容の不備がある。または行き来できないstate。
          content:
            application/json:
              schema:
                type: object
                properties:
                  current_state:
                    type: string
                    example: "rejected"
                  to_state:
                    type: string
                    example: "fully_repaid"
        "404":
          description: 指定された申請書はない。
  "/applications/{applicationId}/states/repaid/{repaidToId}":
    put:
      description: 指定した申請書、支払い対象者についての返金状態を変更する。ただし操作できるのはadminかつstateが"accepted"の時のみ。db上では全員に返却されたときに「2(accepted)から3(fully_repaid)」の操作を行う。
      tags:
        - States
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: repaidToId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  repaid_by_user:
                    $ref: "#/components/schemas/User"
                  repaid_to_user:
                    $ref: "#/components/schemas/User"
                  repaid_at:
                    type: string
                    format: date-time
                  to_state:
                    $ref: "#/components/schemas/StateEnum"
        "400":
          description: すでに返金済みのユーザー。
        "404":
          description: 指定された申請書または返金対象者はない。
  "/images/{imageId}":
    parameters:
    - name: imageId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    get:
      tags:
        - Applications
      description: 指定された画像ファイルを返す
      responses:
        "200":
          description: 該当する画像ファイルが存在した 返す
          content:
            image/png:
              schema:
                type: string
                format: binary
        "404":
          description: Not Found

    delete:
      description: 指定した画像idの画像ファイルを削除する。
      tags:
        - Applications
      responses:
        "204":
          description: 正常に取り消すことができた。
        "403":
          description: 編集権限がない人(作成者、admin以外)による操作。
        "404":
          description: 該当する画像はない。
  "/users":
    get:
      description: ユーザーの一覧を返す
      tags:
        - Users
      responses:
        "200":
          description: 取得に成功した。返す
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  "/users/me":
    get:
      tags:
        - Users
      description: 自分のユーザー情報を取得します
      responses:
        '200':
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  "/users/admins":
    get:
      description: adminユーザーの一覧を返す。
      tags:
        - Users
      responses:
        "200":
          description: 取得に成功した。返す
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    put:
      description: adminユーザーを変更する。
      tags:
        - Users
      requestBody:
        required: true
        content:
            application/json:
              schema:
                type: object
                properties:
                  trap_id:
                    $ref: "#/components/schemas/TrapID"
                  to_admin:
                    type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: リクエストに形式上の不備がある。
        "403":
          description: admin以外の人
        "404":
          description: adminを変更しようとした対象者は存在しない

components:
  schemas:
    TypeEnum:
      type: string
      enum: [club, contest, event, public]
    StateEnum:
      type: string
      enum: [submitted, fix_required, accepted, fully_repaid, rejected]
    TrapID:
      type: string
      pattern: "^[0-9a-zA-Z_]{1,32}$"
      example: "nagatech"
    CompactApplication:
      type: object
      properties:
        application_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        applicant:
          $ref: "#/components/schemas/User"
        current_detail:
          $ref: "#/components/schemas/ApplicationLog"
        current_state:
          $ref: "#/components/schemas/StateEnum"
    DetailedApplication:
      allOf:
        - $ref: "#/components/schemas/CompactApplication"
        - type: object
          properties:
            images:
              type: array
              items:
                type: string
                format: uuid
            comments:
              type: array
              items:
                $ref: "#/components/schemas/Comment"
            state_logs:
              type: array
              items:
                $ref: "#/components/schemas/State"
            application_detail_logs:
              type: array
              items:
                $ref: "#/components/schemas/ApplicationLog"
            repayment_logs:
              type: array
              items:
                $ref: "#/components/schemas/Repayment"
    ApplicationLog:
      type: object
      properties:
        update_user:
          $ref: "#/components/schemas/User"
        type:
          $ref: "#/components/schemas/TypeEnum"
        title:
          type: string
          example: "夏コミの交通費をお願いします。"
        remarks:
          type: string
          example: "〇〇駅から〇〇駅への移動"
        amount:
          type: integer
          minimum: 1
          example: 1200
        paid_at:
          type: string
          format: date
        repaid_to_id:
          type: array
          items:
            $ref: "#/components/schemas/TrapID"
          uniqueItems: true
          minItems: 1
        updated_at:
          type: string
          format: date-time
    PostApplication:
      type: object
      properties:
        details:
          type: object
          properties:
            type:
              $ref: "#/components/schemas/TypeEnum"
            title:
              type: string
              example: "夏コミの交通費をお願いします。"
            remarks:
              type: string
              example: "〇〇駅から〇〇駅への移動"
            paid_at:
              type: string
              format: date-time
            amount:
              type: integer
              minimum: 1
              maximum: 2147483647
              example: 1200
            repaid_to_id:
              type: array
              items:
                $ref: "#/components/schemas/TrapID"
              uniqueItems: true
              minItems: 1
        images:
          type: array
          items:
            type: string
            format: binary
    User:
      type: object
      properties:
        trap_id:
          $ref: "#/components/schemas/TrapID"
        is_admin:
          type: boolean
    Comment:
      type: object
      properties:
        comment_id:
          type: integer
          description: コメント変更削除に対応するため
        user:
          $ref: "#/components/schemas/User"
        comment:
          type: string
          example: "コメント内容"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    State:
      type: object
      properties:
        update_user:
          $ref: "#/components/schemas/User"
        to_state:
          $ref: "#/components/schemas/StateEnum"
        reason:
          type: string
          default: null
          example: "これは雑すぎますね。"
        created_at:
          type: string
          format: date-time
    Repayment:
      type: object
      properties:
        repaid_by_user:
          $ref: "#/components/schemas/User"
        repaid_to_user:
          $ref: "#/components/schemas/User"
        repaid_at:
          type: string
          format: date-time
