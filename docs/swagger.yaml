openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: "/api"
info:
  version: "2.0.0"
  title: Jomon API
  description: >-

    JomonのAPIです。

tags:
- name: "Auth"
  description: "認証用API"
- name: "Transactions"
  description: "トランザクションに関するAPI"
- name: "Requests"
  description: "リクエストに関するAPI"
- name: "File"
  description: "ファイルに関するAPI"
- name: "Tags"
  description: "タグに関するAPI"
- name: "Users"
  description: "ユーザーに関するAPI"
- name: "Groups"
  description: "グループに関するAPI"
- name: "Admins"
  description: "管理者用API"

##### Paths #####

paths:
  /auth/genpkce:
    get:
      operationId: generatePKCE
      description: PKCEを取得する｡
      tags:
        - Auth
      responses:
        "200":
          description: 取得できた場合｡
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthInfo"

  /transactions:
    get:
      operationId: "getTransactions"
      description: トランザクション一覧を取得する。
      tags:
        - Transactions
      parameters:
        - $ref: "#/components/parameters/sortQuery"
        - $ref: "#/components/parameters/targetQuery"
        - $ref: "#/components/parameters/sinceQuery"
        - $ref: "#/components/parameters/untilQuery"
        - $ref: "#/components/parameters/tagQuery"
        - $ref: "#/components/parameters/groupQuery"
        - $ref: "#/components/parameters/requestQuery"
      responses:
        "200":
          description: 該当するものがない場合は空配列を返却。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
        "400":
          $ref: "#/components/responses/400"
    post:
      operationId: postTransaction
      description: トランザクションを新規作成する。管理者権限が必要。
      tags:
        - Transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostTransaction"
      responses:
        "201":
          description: 作成に成功。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"

  /transactions/{transactionID}:
    parameters:
      - name: transactionID
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getTransactionDetail
      description: 指定したトランザクションの詳細を取得する。
      tags:
        - Transactions
      responses:
        "200":
          description: あったら返す。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "404":
          $ref: "#/components/responses/404"
    put:
      operationId: putTransactionDetail
      description: 指定したTransactionを修正する。管理者権限が必要。requestに紐づいている場合は変更不可。
      tags:
        - Transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostTransaction"
      responses:
        "200":
          description: OK 修正後のトランザクションを返却する。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

  /requests:
    get:
      operationId: getRequests
      description: 依頼一覧を取得する。
      tags:
        - Requests
      parameters:
        - $ref: "#/components/parameters/sortQuery"
        - $ref: "#/components/parameters/currentStatusQuery"
        - $ref: "#/components/parameters/targetQuery"
        - $ref: "#/components/parameters/sinceQuery"
        - $ref: "#/components/parameters/untilQuery"
        - $ref: "#/components/parameters/tagQuery"
        - $ref: "#/components/parameters/groupQuery"
      responses:
        "200":
          description: 取得できた場合。該当するものがなくても空配列を返す。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Request"
        "400":
          $ref: "#/components/responses/400"
    post:
      operationId: postRequest
      description: 依頼を新規作成する。
      tags:
        - Requests
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRequest"
      responses:
        "201":
          description: 作成できた場合。作成されたリクエストの詳細を返す。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestDetail"
        "400":
          $ref: "#/components/responses/400"

  /requests/{requestID}:
    parameters:
      - name: requestID
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getRequestDetail
      description: 指定した依頼の詳細を取得する。
      tags:
        - Requests
      responses:
        "200":
          description: あったら返す。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestDetail"
        "404":
          $ref: "#/components/responses/404"
    put:
      operationId: putRequestDetail
      description: 指定した依頼を修正する。作成者権限が必要。
      tags:
        - Requests
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRequest"
      responses:
        "200":
          description: 修正できた場合。修正後の詳細を返す。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestDetail"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

  /requests/{requestID}/comments:
    post:
      operationId: postComment
      description: 指定した依頼にコメントを新規作成する。
      tags:
        - Requests
      parameters:
        - name: requestID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostComment"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"

  /requests/{requestID}/status:
    put:
      operationId: putStatus
      description: 指定した依頼のstatusを変更のみ(新規はpost /requests)する。commentは常に必須(ないときは空文字列)。statusの行き来の定義は作成者は「fix_requiredからsubmitted」をでき、adminは「submittedからrejected」「submittedからrequired」「fix_requiredからsubmitted」「submittedからaccepted」「acceptedからsubmitted（ただしすでに支払われている人がいた場合、この操作は不可)」の操作のみ可。ただし、「acceptedからfully_repaid」の操作はここでは行えない。管理者権限または作成者権限が必要。
      tags:
        - Requests
      parameters:
        - name: requestID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutStatus"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"

  /admins:
    get:
      operationId: getAdmins
      description: adminユーザーの一覧を返す。管理者権限が必要。
      tags:
        - Admins
      responses:
        "200":
          description: 取得に成功した場合。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TrapID"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
    post:
      operationId: postAdmins
      description: adminユーザーを追加する。管理者権限が必要。
      tags:
        - Admins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/TrapID"
      responses:
        "200":
          description: 追加に成功した場合。
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
    delete:
      operationId: deleteAdmins
      description: adminユーザーを削除する。管理者権限が必要。
      tags:
        - Admins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/TrapID"
      responses:
        "200":
          description: 削除できた場合。
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

  /tags:
    get:
      operationId: getTags
      description: タグの一覧を返す。
      tags:
        - Tags
      responses:
        "200":
          description: 取得に成功した場合。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
    post:
      operationId: postTag
      description: タグを追加する。
      tags:
        - Tags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostTag"
      responses:
        "200":
          description: 追加に成功した場合。追加されたタグの情報を返す。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "400":
          $ref: "#/components/responses/400"

  /tags/{tagID}:
    parameters:
      - name: tagID
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      description: タグの情報を取得する。
      tags:
        - Tags
      responses:
        "200":
          description: 取得に成功した場合。
          content:
            application/json:
              schema:
                # なにこれ
                allOf:
                  - $ref: "#/components/schemas/Tag"
                  - type: object
                    properties:
                      transactions:
                        type: array
                        items:
                          type: string
                          format: uuid
                      requests:
                        type: array
                        items:
                          type: string
                          format: uuid
        "404":
          $ref: "#/components/responses/404"
    delete:
      description: タグを削除する
      tags:
        - Tags
      responses:
        "200":
          description: 削除に成功した場合。
        "404":
          $ref: "#/components/responses/404"

  /groups:
    get:
      operationId: getGroups
      description: グループの一覧を返す。
      tags:
        - Groups
      responses:
        "200":
          description: 取得に成功した場合。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
    post:
      operationId: postGroup
      description: グループを追加する。管理者権限が必要。
      tags:
        - Groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostGroup"
      responses:
        "200":
          description: 追加に成功した場合。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"

  /groups/{groupID}:
    parameters:
      - name: groupID
        in: path
        required: true
        schema:
          type: string
          format: uuid
    put:
      operationId: putGroupDetail
      description: グループの情報を変更する。管理者権限またはグループオーナー権限が必要。
      tags:
        - Groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutGroup"
      responses:
        "200":
          description: 変更に成功した場合。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    delete:
      operationId: deleteGroup
      description: グループを削除する。管理者権限またはグループオーナー権限が必要。
      tags:
        - Groups
      responses:
        "200":
          description: 削除に成功した場合
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

  /groups/{groupID}/members:
    parameters:
      - name: groupID
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getGroupMembers
      description: 指定したグループに所属しているユーザーを返す。
      tags:
        - Groups
      responses:
        "200":
          description: 取得に成功した場合。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TrapID"
        "404":
          $ref: "#/components/responses/404"
    post:
      operationId: postGroupMembers
      description: ユーザーをグループに追加する。管理者権限またはグループオーナー権限が必要。
      tags:
        - Groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/TrapID"
      responses:
        "200":
          description: 追加に成功した場合。
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    delete:
      operationId: deleteGroupMembers
      description: ユーザーをグループのメンバーから外す。管理者権限またはグループオーナー権限が必要。
      tags:
        - Group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/TrapID"
      responses:
        "200":
          description: 削除に成功した場合。
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

  /groups/{groupID}/owners:
    parameters:
      - name: groupID
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: memberID
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      operationId: postGroupOwners
      description: グループオーナーをグループに追加する。管理者権限またはグループオーナー権限が必要。
      tags:
        - Groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/TrapID"
      responses:
        "200":
          description: 追加に成功した場合。
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    delete:
      operationId: deleteGroupOwners
      description: ユーザーをグループから削除する。管理者権限またはグループオーナー権限が必要。
      tags:
        - Groups
      responses:
        "200":
          description: 削除に成功した場合。
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

  /files:
    post:
      operationId: postFile
      description: ファイルをアップロードする。
      tags:
        - Files
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PostFile"
      responses:
        "200":
          description: 変更に成功した場合。
          content:
            application/json:
              schema:
                type: object
                properties:
                  file_id:
                    type: string
                    format: uuid
        "400":
          $ref: "#/components/responses/400"

  /files/{fileID}:
    parameters:
      - name: fileID
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getFile
      tags:
        - Files
      description: 指定されたファイルを返す
      responses:
        "200":
          description: 該当するファイルが存在した 返す
          content:
            multipart/form-data:
              schema:
                $ref: "#/components/schemas/File"
        "404":
          $ref: "#/components/responses/404"
    delete:
      operationId: deleteFile
      description: 指定したidのファイルを削除する。管理者権限または作成者権限が必要。
      tags:
        - Files
      responses:
        "204":
          description: 正常に取り消すことができた場合。
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

  /files/{fileID}/meta:
    parameters:
      - name: fileID
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getFileMeta
      description: 指定されたファイルのメタデータを返す
      tags:
        - Files
      responses:
        "200":
          description: 該当するファイルのメタデータが存在した 返す
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileMeta"
        "404":
          $ref: "#/components/responses/404"

  /users:
    get:
      operationId: getUsers
      description: "ユーザー一覧を取得する。"
      tags:
        - "Users"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"

  /users/{userID}:
    parameters:
      - name: userID
        in: path
        required: true
        schema:
          type: string
          format: uuid
    put:
      operationId: putUserDetail
      description: "ユーザーの情報を変更する。主に権限の変更用。管理者権限またはグループオーナー権限が必要。"
      tags:
        - "Users"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutUser"
      responses:
        "200":
          description: "取得に成功した場合。"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

  /users/me:
    get:
      operationId: getMe
      description: "自分の情報を取得する。存在しない場合はユーザーを作成する。"
      tags:
        - "Users"
      responses:
        "200":
          description: "取得に成功した場合。"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

##### Components #####

components:
  schemas:
    AuthInfo: 
      type: object
      properties:
        code_challenge:
          type: string
        code_challenge_method:
          type: string
        client_id:
          type: string
        response_type:
          type: string
    StatusEnum:
      type: string
      enum: [submitted, fix_required, accepted, completed, rejected]
    TrapID:
      type: string
      format: uuid
    Tag:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "2020講習会"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    PostTag:
      type: object
      properties:
        name:
          type: string
          example: "2020講習会"
    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "SysAd"
        description:
          type: string
          example: "SysAd班"
        budget:
          type: integer
          example: 250000
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    PostGroup:
      type: object
      properties:
        name:
          type: string
          example: "SysAd"
        description:
          type: string
          example: "SysAd班"
        budget:
          type: integer
          example: 250000
    PutGroup:
      type: object
      properties:
        name:
          type: string
          example: "SysAd"
        description:
          type: string
          example: "SysAd班"
        budget:
          type: integer
          example: 250000
    File:
      type: object
      properties:
        file:
          type: string
          format: binary
        name:
          type: string
          example: "hoge.png"
    PostFile:
      type: object
      properties:
        file:
          type: string
          format: binary
        name:
          type: string
          example: "hoge.png"
        request_id:
          type: string
          format: uuid
    FileMeta:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        mime_type:
          type: string
        created_at:
          type: string
          format: date-time
    Target:
      type: string
      example: "hoge株式会社"
    TargetDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
        amount:
          type: integer
        target:
          type: string
        paid_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
    Request:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
          enum: [submitted, fix_required, accepted, completed, rejected]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        created_by:
          $ref: "#/components/schemas/TrapID"
        amount:
          type: integer
          example: 1200
        title:
          type: string
          example: "SysAd講習会の開催費用"
        content:
          type: string
          example: "サーバー代 1200円"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        group:
          $ref: "#/components/schemas/Group"
    RequestDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          $ref: "#/components/schemas/StatusEnum"
        amount:
          type: integer
          example: 1200
        title:
          type: string
          example: "SysAd講習会の開催費用"
        content:
          type: string
          example: "サーバー代 1200円"
        created_by:
          type: string
          format: uuid
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
        files:
          type: array
          items:
            type: string
            format: uuid
        statuses:
          type: array
          items:
            $ref: "#/components/schemas/Status"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        group:
          $ref: "#/components/schemas/Group"
        targets:
          type: array
          items:
            $ref: "#/components/schemas/TargetDetail"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    PostRequest:
      type: object
      properties:
        created_by:
          $ref: "#/components/schemas/TrapID"
        amount:
          type: integer
          example: 1200
        title:
          type: string
          example: "SysAd講習会の開催費用"
        content:
          type: string
          example: "サーバー代 1200円"
        tags:
          type: array
          items:
            type: string
            format: uuid
        group:
          type: string
          format: uuid
    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        amount:
          type: integer
          example: 1200
        target:
          $ref: "#/components/schemas/Target"
        request:
          type: string
          format: uuid
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        group:
          $ref: "#/components/schemas/Group"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    PostTransaction:
      type: object
      properties:
        amount:
          type: integer
          example: 1200
        targets:
          type: array
          items:
            $ref: "#/components/schemas/Target"
        tags:
          type: array
          items:
            type: string
            format: uuid
        group:
          type: string
          format: uuid
        request:
          type: string
          format: uuid
    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user:
          $ref: "#/components/schemas/TrapID"
        comment:
          type: string
          example: "コメント内容"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    PostComment:
      type: object
      properties:
        comment:
          type: string
          example: "ここを修正してください。"
    Status:
      type: object
      properties:
        created_by:
          $ref: "#/components/schemas/TrapID"
        status:
          $ref: "#/components/schemas/StatusEnum"
        comment:
          type: string
          default: null
          example: "これは雑すぎますね。"
        created_at:
          type: string
          format: date-time
    PutStatus:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/StatusEnum"
        comment:
          type: string
          example: "良いですね。"
    User:
      type: "object"
      properties:
        name:
          type: "string"
          example: "nagatech"
        display_name:
          type: "string"
          example: "ながてち"
        admin:
          type: "boolean"
        created_at:
          type: "string"
          format: "date-time"
        updated_at:
          type: "string"
          format: "date-time"
        deleted_at:
          type: "string"
          format: "date-time"
    PutUser:
      type: "object"
      properties:
        name:
          type: "string"
          example: "nagatech"
        display_name:
          type: "string"
          example: "ながてち"
        admin:
          type: "boolean"
  responses:
    400:
      description: 不正なリクエスト。
    403:
      description: 編集権限がない人による操作。
    404:
      description: 指定したリソースは存在しない。

  parameters:
    sortQuery:
      name: sort
      description: 並び順 (作成日時が新しい "created_at", 作成日時が古い "-created_at", タイトルの昇順 "title", タイトルの降順 "-title")
      required: false
      in: query
      schema:
        type: string
    currentStatusQuery:
      name: current_status
      description: 現在の状態
      required: false
      in: query
      schema:
        type: string
    targetQuery:
      name: target
      description: 誰との取引か
      required: false
      in: query
      schema:
        type: string
    sinceQuery:
      name: since
      description: いつからの依頼か
      required: false
      in: query
      schema:
        type: string
        format: date
    untilQuery:
      name: until
      description: いつまでの依頼か
      required: false
      in: query
      schema:
        type: string
        format: date
    tagQuery:
      name: tag
      description: タグ(複数の場合カンマ区切り)
      required: false
      in: query
      schema:
        type: string
    groupQuery:
      name: group
      description: グループ
      required: false
      in: query
      schema:
        type: string
    requestQuery:
      name: request
      description: 依頼
      required: False
      in: query
      schema:
        type: string
        format: uuid
