// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/traPtitech/Jomon/ent/groupbudget"
	"github.com/traPtitech/Jomon/ent/request"
	"github.com/traPtitech/Jomon/ent/transaction"
	"github.com/traPtitech/Jomon/ent/transactiondetail"
)

// Transaction is the model entity for the Transaction schema.
type Transaction struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransactionQuery when eager-loading is set.
	Edges                    TransactionEdges `json:"edges"`
	group_budget_transaction *uuid.UUID
	request_transaction      *uuid.UUID
}

// TransactionEdges holds the relations/edges for other nodes in the graph.
type TransactionEdges struct {
	// Detail holds the value of the detail edge.
	Detail *TransactionDetail `json:"detail,omitempty"`
	// Tag holds the value of the tag edge.
	Tag []*Tag `json:"tag,omitempty"`
	// GroupBudget holds the value of the group_budget edge.
	GroupBudget *GroupBudget `json:"group_budget,omitempty"`
	// Request holds the value of the request edge.
	Request *Request `json:"request,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// DetailOrErr returns the Detail value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) DetailOrErr() (*TransactionDetail, error) {
	if e.loadedTypes[0] {
		if e.Detail == nil {
			// The edge detail was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: transactiondetail.Label}
		}
		return e.Detail, nil
	}
	return nil, &NotLoadedError{edge: "detail"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading.
func (e TransactionEdges) TagOrErr() ([]*Tag, error) {
	if e.loadedTypes[1] {
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// GroupBudgetOrErr returns the GroupBudget value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) GroupBudgetOrErr() (*GroupBudget, error) {
	if e.loadedTypes[2] {
		if e.GroupBudget == nil {
			// The edge group_budget was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: groupbudget.Label}
		}
		return e.GroupBudget, nil
	}
	return nil, &NotLoadedError{edge: "group_budget"}
}

// RequestOrErr returns the Request value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) RequestOrErr() (*Request, error) {
	if e.loadedTypes[3] {
		if e.Request == nil {
			// The edge request was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: request.Label}
		}
		return e.Request, nil
	}
	return nil, &NotLoadedError{edge: "request"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transaction) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case transaction.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case transaction.FieldID:
			values[i] = new(uuid.UUID)
		case transaction.ForeignKeys[0]: // group_budget_transaction
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case transaction.ForeignKeys[1]: // request_transaction
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Transaction", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transaction fields.
func (t *Transaction) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transaction.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case transaction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case transaction.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field group_budget_transaction", values[i])
			} else if value.Valid {
				t.group_budget_transaction = new(uuid.UUID)
				*t.group_budget_transaction = *value.S.(*uuid.UUID)
			}
		case transaction.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field request_transaction", values[i])
			} else if value.Valid {
				t.request_transaction = new(uuid.UUID)
				*t.request_transaction = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryDetail queries the "detail" edge of the Transaction entity.
func (t *Transaction) QueryDetail() *TransactionDetailQuery {
	return (&TransactionClient{config: t.config}).QueryDetail(t)
}

// QueryTag queries the "tag" edge of the Transaction entity.
func (t *Transaction) QueryTag() *TagQuery {
	return (&TransactionClient{config: t.config}).QueryTag(t)
}

// QueryGroupBudget queries the "group_budget" edge of the Transaction entity.
func (t *Transaction) QueryGroupBudget() *GroupBudgetQuery {
	return (&TransactionClient{config: t.config}).QueryGroupBudget(t)
}

// QueryRequest queries the "request" edge of the Transaction entity.
func (t *Transaction) QueryRequest() *RequestQuery {
	return (&TransactionClient{config: t.config}).QueryRequest(t)
}

// Update returns a builder for updating this Transaction.
// Note that you need to call Transaction.Unwrap() before calling this method if this Transaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transaction) Update() *TransactionUpdateOne {
	return (&TransactionClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Transaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transaction) Unwrap() *Transaction {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transaction is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transaction) String() string {
	var builder strings.Builder
	builder.WriteString("Transaction(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Transactions is a parsable slice of Transaction.
type Transactions []*Transaction

func (t Transactions) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
