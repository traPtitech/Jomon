// Code generated by entc, DO NOT EDIT.

package group

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the group type in the database.
	Label = "group"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldBudget holds the string denoting the budget field in the database.
	FieldBudget = "budget"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeGroupBudget holds the string denoting the group_budget edge name in mutations.
	EdgeGroupBudget = "group_budget"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeRequest holds the string denoting the request edge name in mutations.
	EdgeRequest = "request"
	// Table holds the table name of the group in the database.
	Table = "groups"
	// GroupBudgetTable is the table that holds the group_budget relation/edge.
	GroupBudgetTable = "group_budgets"
	// GroupBudgetInverseTable is the table name for the GroupBudget entity.
	// It exists in this package in order to avoid circular dependency with the "groupbudget" package.
	GroupBudgetInverseTable = "group_budgets"
	// GroupBudgetColumn is the table column denoting the group_budget relation/edge.
	GroupBudgetColumn = "group_group_budget"
	// UserTable is the table that holds the user relation/edge. The primary key declared below.
	UserTable = "group_user"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// OwnerTable is the table that holds the owner relation/edge. The primary key declared below.
	OwnerTable = "group_owner"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// RequestTable is the table that holds the request relation/edge.
	RequestTable = "requests"
	// RequestInverseTable is the table name for the Request entity.
	// It exists in this package in order to avoid circular dependency with the "request" package.
	RequestInverseTable = "requests"
	// RequestColumn is the table column denoting the request relation/edge.
	RequestColumn = "group_request"
)

// Columns holds all SQL columns for group fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldBudget,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

var (
	// UserPrimaryKey and UserColumn2 are the table columns denoting the
	// primary key for the user relation (M2M).
	UserPrimaryKey = []string{"group_id", "user_id"}
	// OwnerPrimaryKey and OwnerColumn2 are the table columns denoting the
	// primary key for the owner relation (M2M).
	OwnerPrimaryKey = []string{"group_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
